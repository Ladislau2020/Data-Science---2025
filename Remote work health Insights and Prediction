{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12377379,"sourceType":"datasetVersion","datasetId":7804418}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Remote work health Insights and Prediction","metadata":{}},{"cell_type":"markdown","source":"## PREPARATION","metadata":{}},{"cell_type":"markdown","source":"\n>### With this project, we aim to *analyze remote work impact on health*, and *conclude if it has a negatic or positive impact in health*. Furthermore, we are going to predict the impact of remote work on health, as it could be either postive or negative.\n","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/remote-work-of-health-impact-survey-june-2025/post_pandemic_remote_work_health_impact_2025.csv\")\ndf.head()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.shape","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## DATA CLEANING","metadata":{}},{"cell_type":"markdown","source":"### Accordign to our dataset, we just need to perform the folowing transformation:\n* Convert the \"Survey_Date\" column to Date\n* Transform the \"Physical_Health_Issues\" column to numbers (What matters to me is if they have zero, one or more health issues)\n* Create an Age BreakDown","metadata":{}},{"cell_type":"markdown","source":"Let's begin by converting the \"*Survey_Date*\" column to Date","metadata":{}},{"cell_type":"code","source":"df[\"Survey_Date\"] = pd.to_datetime(df[\"Survey_Date\"])","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"\"*Survey_Date*\" was converted to datetime","metadata":{}},{"cell_type":"markdown","source":"Now we are going to count the number of issues each worker has, as this is a more significant information for us than what issues they have.","metadata":{}},{"cell_type":"code","source":"# Splitting the issues by its delimiter \";\"\nissues_list = df[\"Physical_Health_Issues\"].str.split(\";\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"issues_list","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Countinf the number of issues or number of items by each row\n\ncounts = issues_list.apply(lambda x: len(x) if isinstance(x, list) else 0)\n\nprint(counts)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"***inserting the number of issues to our DF***","metadata":{}},{"cell_type":"code","source":"df[\"Issues_Count\"] = counts","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Breaking down Age by Age group","metadata":{}},{"cell_type":"code","source":"df[\"Age_Group\"] = pd.cut(\n    df[\"Age\"],\n    bins=[0, 36, 50, float(\"inf\")],\n    labels=[\"Youth\", \"MidAge\", \"Senior\"],\n    right=True\n)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## EXPLORATION","metadata":{}},{"cell_type":"markdown","source":"### Let's begin our exploration now and see the correlation amont our features","metadata":{}},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.heatmap(df.corr(numeric_only=True), annot=True, cmap=\"Blues\")\nplt.title(\"Correlation Matrix (numerical features)\");","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### ðŸ”¹ b. Burnout over Time","metadata":{}},{"cell_type":"code","source":"df[\"Survey_Date\"] = pd.to_datetime(df[\"Survey_Date\"])\ndf_grouped = df.groupby(df[\"Survey_Date\"].dt.to_period(\"D\"))[\"Burnout_Level\"].value_counts().unstack().fillna(0)\ndf_grouped.plot(kind=\"line\", figsize=(12, 6))\nplt.title(\"Burnout over Time\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.countplot(data=df, x=\"Region\", hue=\"Burnout_Level\")\nplt.xticks(rotation=45);\nplt.title(\"Burnout Level by Region\");","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.boxplot(data=df, x=\"Burnout_Level\", y=\"Social_Isolation_Score\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"industry_scores = df.groupby(\"Industry\")[\"Work_Life_Balance_Score\"].sum().sort_values()\nindustry_scores.plot(kind=\"barh\", figsize=(8, 6))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df[\"Age_Group\"].value_counts()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pivot_table = df.pivot_table(index=\"Age_Group\", columns=\"Work_Arrangement\", aggfunc=\"size\", fill_value=0)\n\n# Plot the heatmap\nplt.figure(figsize=(10, 6))\nsns.heatmap(pivot_table, annot=True, cmap=\"Blues\", fmt=\"d\")\nplt.title(\"Frequency of Age_Group Level by Work_Arrangement\")\nplt.xlabel(\"Work_Arrangement\")\nplt.ylabel(\"Age_Group\")\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show();","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df[\"Work_Life_Balance_Score\"].value_counts().plot(kind=\"bar\");","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pivot_table = df.pivot_table(index=\"Work_Life_Balance_Score\", columns=\"Work_Arrangement\", aggfunc=\"size\", fill_value=0)\n\n# Plot the heatmap\nplt.figure(figsize=(10, 6))\nsns.heatmap(pivot_table, annot=True, cmap=\"Blues\", fmt=\"d\")\nplt.title(\"Frequency of Work_Life_Balance_Score Level by Work_Arrangement\")\nplt.xlabel(\"Work_Arrangement\")\nplt.ylabel(\"Work_Life_Balance_Score\")\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show();","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df[\"Work_Arrangement\"].value_counts().plot(kind=\"bar\");","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pivot_table = df.pivot_table(index=\"Burnout_Level\", columns=\"Work_Arrangement\", aggfunc=\"size\", fill_value=0)\n\n# Plot the heatmap\nplt.figure(figsize=(10, 6))\nsns.heatmap(pivot_table, annot=True, cmap=\"Blues\", fmt=\"d\")\nplt.title(\"Frequency of Burnout Level by Work Arrangement\")\nplt.xlabel(\"Work Arrangement\")\nplt.ylabel(\"Burnout Level\")\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show();","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df[\"Mental_Health_Status\"].isnull().sum()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df[\"Mental_Health_Status\"].isnull().sum() / df[\"Mental_Health_Status\"].count()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Only **799** people don't have a mental health issue, representing **33%** from our sample.","metadata":{}},{"cell_type":"code","source":"df[[\"Salary_Range\", \"Burnout_Level\"]].value_counts()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pivot_table = df.pivot_table(index=\"Burnout_Level\", columns=\"Salary_Range\", aggfunc=\"size\", fill_value=0)\n\n# Plot the heatmap\nplt.figure(figsize=(10, 6))\nsns.heatmap(pivot_table, annot=True, cmap=\"Blues\", fmt=\"d\")\nplt.title(\"Frequency of Burnout Level by Salary Range\")\nplt.xlabel(\"Salary Range\")\nplt.ylabel(\"Burnout Level\")\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Advanced Exploration","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 1. Define the features to include in the radar\nfeatures = [\"Work_Life_Balance_Score\", \"Social_Isolation_Score\", \"Hours_Per_Week\", \"Issues_Count\"]\n\n# 2. Group by Burnout_Level and calculate mean for each feature\ngrouped = df.groupby(\"Burnout_Level\")[features].mean()\n\n# 3. Radar chart setup\nlabels = features\nnum_vars = len(labels)\nangles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()\n\n# Repeat the first angle to close the radar\nangles += angles[:1]\n\n# 4. Plot\nfig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))\ncolors = plt.cm.viridis(np.linspace(0, 1, len(grouped)))\n\nfor i, (level, row) in enumerate(grouped.iterrows()):\n    values = row.tolist()\n    values += values[:1]  # repeat first value\n    ax.plot(angles, values, color=colors[i], linewidth=2, label=level)\n    ax.fill(angles, values, color=colors[i], alpha=0.25)\n\n# Aesthetic tweaks\nax.set_theta_offset(np.pi / 2)\nax.set_theta_direction(-1)\nax.set_thetagrids(np.degrees(angles[:-1]), labels)\nax.set_title(\"Radar Chart: Average Scores per Burnout Level\", fontsize=14)\nax.legend(loc=\"upper right\", bbox_to_anchor=(1.3, 1.1))\nplt.tight_layout()\nplt.show();","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### PCA for Pattern Detection","metadata":{}},{"cell_type":"code","source":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\npca_data = pca.fit_transform(X_scaled)\n\ndf.loc[X.index, \"PCA1\"] = pca_data[:, 0]\ndf.loc[X.index, \"PCA2\"] = pca_data[:, 1]\n\nplt.figure(figsize=(8, 6))\nsns.scatterplot(data=df.loc[X.index], x=\"PCA1\", y=\"PCA2\", hue=\"Burnout_Level\")\nplt.title(\"PCA: Burnout Patterns\")\nplt.tight_layout()\nplt.show();","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Clustering Employees Based on Risk Factors","metadata":{}},{"cell_type":"markdown","source":"### Decision Tree for Burnout Prediction","metadata":{}},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.model_selection import train_test_split\n\n# Encode burnout labels if needed\ndf[\"Burnout_Code\"] = df[\"Burnout_Level\"].astype(\"category\").cat.codes\n\nX = df[features].dropna()\ny = df.loc[X.index, \"Burnout_Code\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=42)\n\nclf = DecisionTreeClassifier(max_depth=4, random_state=42)\nclf.fit(X_train, y_train)\n\nplt.figure(figsize=(15, 8))\nplot_tree(clf, feature_names=features, class_names=df[\"Burnout_Level\"].astype(\"category\").cat.categories, filled=True)\nplt.title(\"Decision Tree: What Drives Burnout?\")\nplt.show();","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}